/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kraken.api;

import com.kraken.models.ErrorResponse;
import com.kraken.models.OrderBook;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-22T15:56:17.982854+03:00[Europe/Sofia]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Orderbook", description = "All Orderbook methods")
public interface OrderbookApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /orderbook/current : Get the current order book snapshot.
     *
     * @param currencyPair  (required)
     * @return Order book data retrieved successfully. (status code 200)
     *         or BAD REQUEST (status code 400)
     *         or FORBIDDEN (status code 403)
     *         or NOT FOUND (status code 404)
     *         or INTERNAL SERVER ERROR (status code 500)
     */
    @Operation(
        operationId = "orderbookCurrentGet",
        summary = "Get the current order book snapshot.",
        tags = { "Orderbook" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order book data retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderBook.class))
            }),
            @ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "FORBIDDEN", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "NOT FOUND", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "INTERNAL SERVER ERROR", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderbook/current",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrderBook> orderbookCurrentGet(
        @NotNull @Parameter(name = "currencyPair", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "currencyPair", required = true) String currencyPair
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"asks\" : [ { \"volume\" : 6.027456183070403, \"price\" : 0.8008281904610115 }, { \"volume\" : 6.027456183070403, \"price\" : 0.8008281904610115 } ], \"bids\" : [ { \"volume\" : 6.027456183070403, \"price\" : 0.8008281904610115 }, { \"volume\" : 6.027456183070403, \"price\" : 0.8008281904610115 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"detail\" : \"detail\", \"type\" : \"type\", \"title\" : \"title\", \"status\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"detail\" : \"detail\", \"type\" : \"type\", \"title\" : \"title\", \"status\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"detail\" : \"detail\", \"type\" : \"type\", \"title\" : \"title\", \"status\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"detail\" : \"detail\", \"type\" : \"type\", \"title\" : \"title\", \"status\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
